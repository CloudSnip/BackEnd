name: Deploy Project with Nginx

on:
  push:
    branches:
      - main
      - develop

jobs:
  deploy:
    name: Deploy project with Nginx
    permissions:
      deployments: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: 'actions/checkout@v2'
        with:
          ref: ${{ github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}  # Use GITHUB_TOKEN for authentication

      - name: Create GitHub deployment
        uses: chrnorm/deployment-action@v2
        id: deployment
        with:
          token: '${{ github.token }}'
          environment-url: ${{ vars.MY_APP }}
          environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}  # Set environment dynamically

      - name: Set up SSH Key and Deploy my App on Server
        uses: appleboy/ssh-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use GITHUB_TOKEN for authentication
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: 22
          script: |
            # Using GitHub Token for authentication with private repositories
            git config --global url."https://${{ secrets.GITHUB_TOKEN }}:@github.com".insteadOf "https://github.com"
            
            # Check if the 'backend' directory is empty or doesn't exist, then clone or pull accordingly.
            if [ "${{ github.ref }}" == "refs/heads/main" ]; then
              if [ ! -d "${{ secrets.PROD_DIR }}/backend" ] || [ ! "$(ls -A ${{ secrets.PROD_DIR }}/backend)" ]; then
                echo "Cloning production repository..."
                git clone https://github.com/${{ github.repository }} ${{ secrets.PROD_DIR }}/backend
                cd ${{ secrets.PROD_DIR }}/backend
                git checkout main
              else
                echo "Production backend directory is not empty, pulling latest changes..."
                cd ${{ secrets.PROD_DIR }}/backend
                git pull origin main  # Pull from main for production
              fi

              # Deploy the production app
              npm ci
              # Ensure pm2 is running and the correct process is started
              if pm2 list | grep -q 'chatg'; then
                echo "Process 'chatg' is already running. Restarting..."
                pm2 restart chatg --update-env
              else
                echo "Process 'chatg' not found. Starting new process..."
                pm2 start ${{ secrets.PROD_DIR }}/backend --name chatg --env production  # Adjust the path as necessary
                pm2 save  # Save the process to be resurrected on reboot
              fi

            elif [ "${{ github.ref }}" == "refs/heads/develop" ]; then
              if [ ! -d "${{ secrets.DEV_DIR }}/backend" ] || [ ! "$(ls -A ${{ secrets.DEV_DIR }}/backend)" ]; then
                echo "Cloning development repository..."
                git clone https://github.com/${{ github.repository }} ${{ secrets.DEV_DIR }}/backend
                cd ${{ secrets.DEV_DIR }}/backend
                git checkout develop
              else
                echo "Development backend directory is not empty, pulling latest changes..."
                cd ${{ secrets.DEV_DIR }}/backend
                git pull origin develop  # Pull from develop for development
              fi

              # Deploy the development app
              npm ci
              npm run frontend
              # Ensure pm2 is running and the correct process is started
              if pm2 list | grep -q 'chatg'; then
                echo "Process 'chatg' is already running. Restarting..."
                pm2 restart chatg --update-env
              else
                echo "Process 'chatg' not found. Starting new process..."
                pm2 start ${{ secrets.DEV_DIR }}/backend --name chatg --env production  # Adjust the path as necessary
                pm2 save  # Save the process to be resurrected on reboot
              fi
            fi

      - name: Update deployment Status (success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: ${{ vars.MY_APP }}
          state: 'success'
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: ${{ vars.MY_APP }}
          state: 'failure'
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
